import argparse
import ConfigParser

import dateparser

import os

from launchpadlib import launchpad

LP_INSTANCE = 'production'
LP_STATUS = (
    'New', 'Incomplete', 'Opinion', 'Invalid', 'Won\'t Fix', 'Confirmed',
    'Triaged', 'In Progress', 'Fix Committed', 'Fix Released'
)
CLOSED_STATUS = (
    'Opinion', 'Invalid', 'Won\'t Fix',
)
FIXED_STATUS = (
    'Fix Committed', 'Fix Released'
)


output_dir = '/opt/stack/output_files'
# 'release_name': (start, end)
release_timemappings = {
    'nova': {
        'M': ('Oct 15, 2015 12:00 AM CST', 'Mar 31, 2016 11:59 PM CST'),
        'N': ('Mar 31, 2016 12:00 AM CST', 'Sep 1, 2016 11:59 PM CST'),
        'O': ('Sep 1, 2016 12:00 AM CST', 'Feb 16, 2017 11:59 PM CST'),
        'P': ('Feb 16, 2017 12:00 AM CST', 'Aug 24, 2017 11:59 PM CST'),
        'Q': ('Aug 24, 2017 12:00 AM CST', 'Feb 8, 2018 11:59 PM CST')
    },
    'neutron': {
        'M': ('Oct 15, 2015 12:00 AM CST', 'Mar 17, 2016 11:59 PM CST'),
        'N': ('Mar 17, 2016 12:00 AM CST', 'Sep 28, 2016 11:59 PM CST'),
        'O': ('Sep 28, 2016 12:00 AM CST', 'Feb 16, 2017 11:59 PM CST'),
        'P': ('Feb 16, 2017 12:00 AM CST', 'Aug 23, 2017 11:59 PM CST'),
        'Q': ('Aug 23, 2017 12:00 AM CST', 'Feb 20, 2018 11:59 PM CST')
    },
    'cinder': {
        'M': ('Oct 15, 2015 12:00 AM CST', 'Apr 7, 2016 11:59 PM CST'),
        'N': ('Apr 7, 2016 12:00 AM CST', 'Sep 28, 2016 11:59 PM CST'),
        'O': ('Sep 28, 2016 12:00 AM CST', 'Feb 16, 2017 11:59 PM CST'),
        'P': ('Feb 16, 2017 12:00 AM CST', 'Aug 23, 2017 11:59 PM CST'),
        'Q': ('Aug 23, 2017 12:00 AM CST', 'Feb 20, 2018 11:59 PM CST')
    }
}

def configure(config_file):
    config = ConfigParser.SafeConfigParser()
    config.read(config_file)
    return config


def main(launchpad_config, report_config):
    lp = launchpad.Launchpad.login_with(
        launchpad_config.get('launchpad', 'account_name'),
        LP_INSTANCE,
        launchpad_config.get('launchpad', 'cache_dir')
    )

    for project_name in release_timemappings.keys():
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        if not os.path.exists(os.path.join(output_dir, project_name)):
            os.makedirs(os.path.join(output_dir, project_name))

        for release_name, time_tuple in release_timemappings[
            project_name].items():
            if not os.path.exists(
                    os.path.join(os.path.join(output_dir, project_name),
                                 release_name)):
                os.makedirs(
                    os.path.join(os.path.join(output_dir, project_name),
                                 release_name))
            start = time_tuple[0]
            end = time_tuple[1]
            settings = {'TO_TIMEZONE': 'UTC'}
            start_datetime = dateparser.parse(start, settings=settings)
            end_datetime = dateparser.parse(end, settings=settings)

            created_bugs = []
            closed_bugs = []
            fixed_bugs = []
            details_status_bugs = {}
            for status in LP_STATUS:
                details_status_bugs[status] = []
            details_importance_bugs = {}
            bugs = lp.projects[project_name].searchTasks(
                status=LP_STATUS, modified_since=start_datetime
            )
            for bug in bugs:
                created_at = bug.date_created
                if created_at <= end_datetime and created_at >= start_datetime:
                    # total bugs
                    created_bugs.append(bug)

                if bug.status in CLOSED_STATUS:
                    closed_at = bug.date_closed
                    if closed_at <= end_datetime and closed_at >= start_datetime:
                        closed_bugs.append(bug)

                if bug.status in FIXED_STATUS:
                    closed_at = bug.date_closed
                    if not closed_at:
                        closed_at = bug.date_fix_committed
                    if closed_at <= end_datetime and closed_at >= start_datetime:
                        fixed_bugs.append(bug)

                if created_at <= end_datetime and created_at >= start_datetime:
                    details_status_bugs[bug.status].append(bug)

                if details_importance_bugs.get(bug.importance):
                    if created_at <= end_datetime and created_at >= start_datetime:
                        details_importance_bugs[bug.importance].append(bug)
                else:
                    if created_at <= end_datetime and created_at >= start_datetime:
                        details_importance_bugs[bug.importance] = [bug]

            with open(os.path.join(
                    os.path.join(os.path.join(output_dir, project_name),
                                 release_name),
                    'total_created_bugs'), 'w') as out_f:
                print('\nTotal Bugs opened (%d)\n' % len(created_bugs))
                out_f.write('Total Bugs opened (%d)\n' % len(created_bugs))
                out_f.write(
                    '=================================================\n')
                for bug in created_bugs:
                    if bug.assignee:
                        assignee = bug.assignee.display_name
                    else:
                        assignee = 'no one'
                    s = 'Bug #%(number)s %(status)s (%(target)s:%(sev)s) %(title)s opened by %(owner)s %(link)s fixed by %(assignee)s'
                    s = s % {
                        'number': str(bug.bug.id).encode('utf-8'),
                        'target': bug.bug_target_name.encode('utf-8'),
                        'sev': bug.importance.encode('utf-8'),
                        'owner': bug.owner.display_name.encode('utf-8'),
                        'link': bug.web_link.encode('utf-8'),
                        'status': bug.status.encode('utf-8'),
                        'title': bug.title.encode('utf-8'),
                        'assignee': assignee.encode('utf-8')
                    }
                    print s
                    s = s + '\n'
                    out_f.write(s)

            with open(os.path.join(
                    os.path.join(os.path.join(output_dir, project_name),
                                 release_name),
                    'total_closed_bugs'), 'w') as out_f:
                print('\nTotal Bugs closed (%d)\n' % len(closed_bugs))
                out_f.write('Total Bugs closed (%d)\n' % len(closed_bugs))
                out_f.write(
                    '=================================================\n')
                for bug in closed_bugs:
                    if bug.assignee:
                        assignee = bug.assignee.display_name
                    else:
                        assignee = 'no one'
                    s = 'Bug #%(number)s %(status)s (%(target)s:%(sev)s) %(title)s opened by %(owner)s %(link)s fixed by %(assignee)s'
                    s = s % {
                        'number': str(bug.bug.id).encode('utf-8'),
                        'target': bug.bug_target_name.encode('utf-8'),
                        'sev': bug.importance.encode('utf-8'),
                        'owner': bug.owner.display_name.encode('utf-8'),
                        'link': bug.web_link.encode('utf-8'),
                        'status': bug.status.encode('utf-8'),
                        'title': bug.title.encode('utf-8'),
                        'assignee': assignee.encode('utf-8')
                    }
                    print s
                    s = s + '\n'
                    out_f.write(s)

            with open(os.path.join(
                    os.path.join(os.path.join(output_dir, project_name),
                                 release_name),
                    'total_fixed_bugs'), 'w') as out_f:
                print('\nTotal Bugs fixed (%d)\n' % len(fixed_bugs))
                out_f.write('Total Bugs fixed (%d)\n' % len(fixed_bugs))
                out_f.write(
                    '=================================================\n')
                for bug in fixed_bugs:
                    if bug.assignee:
                        assignee = bug.assignee.display_name
                    else:
                        assignee = 'no one'
                    s = 'Bug #%(number)s %(status)s (%(target)s:%(sev)s) %(title)s opened by %(owner)s %(link)s fixed by %(assignee)s'
                    s = s % {
                        'number': str(bug.bug.id).encode('utf-8'),
                        'target': bug.bug_target_name.encode('utf-8'),
                        'sev': bug.importance.encode('utf-8'),
                        'owner': bug.owner.display_name.encode('utf-8'),
                        'link': bug.web_link.encode('utf-8'),
                        'status': bug.status.encode('utf-8'),
                        'title': bug.title.encode('utf-8'),
                        'assignee': assignee.encode('utf-8')
                    }
                    print s
                    s = s + '\n'
                    out_f.write(s)

            for status in details_status_bugs.keys():
                status_file_name = status.replace(' ', '')
                if status_file_name.startswith('Won'):
                    status_file_name = 'wontfix'
                status_file_name = 'status_' + status_file_name + '_bugs'
                with open(os.path.join(
                        os.path.join(os.path.join(output_dir, project_name),
                                     release_name),
                        status_file_name), 'w') as out_f:

                    print('\nTotal Bugs status (%s) (%d)\n' % (status,
                                                               len(
                                                                   details_status_bugs[
                                                                       status])))
                    out_f.write('Total Bugs status (%s) (%d)\n' % (status,
                                                                   len(
                                                                       details_status_bugs[
                                                                           status])))
                    out_f.write(
                        '=================================================\n')

                    for bug in details_status_bugs[status]:
                        if bug.assignee:
                            assignee = bug.assignee.display_name
                        else:
                            assignee = 'no one'
                        s = 'Bug #%(number)s %(status)s (%(target)s:%(sev)s) %(title)s opened by %(owner)s %(link)s fixed by %(assignee)s'
                        s = s % {
                            'number': str(bug.bug.id).encode('utf-8'),
                            'target': bug.bug_target_name.encode('utf-8'),
                            'sev': bug.importance.encode('utf-8'),
                            'owner': bug.owner.display_name.encode('utf-8'),
                            'link': bug.web_link.encode('utf-8'),
                            'status': bug.status.encode('utf-8'),
                            'title': bug.title.encode('utf-8'),
                            'assignee': assignee.encode('utf-8')
                        }
                        print s
                        s = s + '\n'
                        out_f.write(s)

            for importance in details_importance_bugs.keys():
                importance_file_name = importance.replace(' ', '')
                importance_file_name = 'importance_' + importance_file_name + '_bugs'
                with open(os.path.join(
                        os.path.join(os.path.join(output_dir, project_name),
                                     release_name),
                        importance_file_name), 'w') as out_f:

                    print('\nTotal Bugs status (%s) (%d)\n' % (importance,
                                                               len(
                                                                   details_importance_bugs[
                                                                       importance])))
                    out_f.write('Total Bugs status (%s) (%d)\n' % (importance,
                                                                   len(
                                                                       details_importance_bugs[
                                                                           importance])))
                    out_f.write(
                        '=================================================\n')

                    for bug in details_importance_bugs[importance]:
                        if bug.assignee:
                            assignee = bug.assignee.display_name
                        else:
                            assignee = 'no one'
                        s = 'Bug #%(number)s %(status)s (%(target)s:%(sev)s) %(title)s opened by %(owner)s %(link)s fixed by %(assignee)s'
                        s = s % {
                            'number': str(bug.bug.id).encode('utf-8'),
                            'target': bug.bug_target_name.encode('utf-8'),
                            'sev': bug.importance.encode('utf-8'),
                            'owner': bug.owner.display_name.encode('utf-8'),
                            'link': bug.web_link.encode('utf-8'),
                            'status': bug.status.encode('utf-8'),
                            'title': bug.title.encode('utf-8'),
                            'assignee': assignee.encode('utf-8')
                        }
                        print s
                        s = s + '\n'
                        out_f.write(s)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Automated bug reports.')
    parser.add_argument(
        '--launchpad-config-file', default='~/.launchpadtk.conf'
    )
    parser.add_argument('--report-config-file', default='sample.conf')
    args = parser.parse_args()

    launchpad_config = configure(
        os.path.expanduser(args.launchpad_config_file)
    )
    report_config = configure(args.report_config_file)
    main(launchpad_config, report_config)
